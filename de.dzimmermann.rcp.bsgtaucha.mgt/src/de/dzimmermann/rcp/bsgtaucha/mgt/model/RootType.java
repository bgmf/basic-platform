//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.21 at 04:16:13 PM MESZ 
//

package de.dzimmermann.rcp.bsgtaucha.mgt.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.apache.commons.codec.binary.Base64;

/**
 * <p>
 * Java class for rootType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="rootType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="persons" type="{http://de.dezimmermann.rcp.bsgtaucha.mgt/bsgtaucha-model}personsType" minOccurs="0"/>
 *         &lt;element name="works" type="{http://de.dezimmermann.rcp.bsgtaucha.mgt/bsgtaucha-model}worksType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="default-pw" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="advanced-pw" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "rootType", propOrder = { "persons", "works" })
public class RootType {

	protected PersonsType persons;
	protected WorksType works;

	@XmlAttribute(name = "default-pw")
	@XmlJavaTypeAdapter(Base64Adapter.class)
	protected String defaultPw;
	@XmlAttribute(name = "advanced-pw")
	@XmlJavaTypeAdapter(Base64Adapter.class)
	protected String advancedPw;

	/**
	 * Gets the value of the persons property.
	 * 
	 * @return possible object is {@link PersonsType }
	 * 
	 */
	public PersonsType getPersons() {
		return persons;
	}

	/**
	 * Sets the value of the persons property.
	 * 
	 * @param value
	 *            allowed object is {@link PersonsType }
	 * 
	 */
	public void setPersons(PersonsType value) {
		this.persons = value;
	}

	/**
	 * Gets the value of the works property.
	 * 
	 * @return possible object is {@link WorksType }
	 * 
	 */
	public WorksType getWorks() {
		return works;
	}

	/**
	 * Sets the value of the works property.
	 * 
	 * @param value
	 *            allowed object is {@link WorksType }
	 * 
	 */
	public void setWorks(WorksType value) {
		this.works = value;
	}

	/**
	 * Gets the value of the defaultPw property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getDefaultPw() {
		return defaultPw;
	}

	/**
	 * Sets the value of the defaultPw property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setDefaultPw(String value) {
		this.defaultPw = value;
	}

	/**
	 * Gets the value of the advancedPw property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getAdvancedPw() {
		return advancedPw;
	}

	/**
	 * Sets the value of the advancedPw property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setAdvancedPw(String value) {
		this.advancedPw = value;
	}

	public RootType getClone() {
		RootType rt = new RootType();
		rt.advancedPw = advancedPw != null ? new String(advancedPw) : null;
		rt.defaultPw = defaultPw != null ? new String(defaultPw) : null;
		rt.persons = persons != null ? persons.getClone() : null;
		rt.works = works != null ? works.getClone() : null;
		return rt;
	}

	private static final class Base64Adapter extends XmlAdapter<String, String> {

		@Override
		public String marshal(String v) throws Exception {
			if (v == null || v.isEmpty())
				return v;
			return new String(Base64.encodeBase64(v.getBytes()));
		}

		@Override
		public String unmarshal(String v) throws Exception {
			if (v == null || v.isEmpty())
				return v;
			return new String(Base64.decodeBase64(v.getBytes()));
		}
	}

	@Override
	public String toString() {
		return String
				.format("RootType%n--------%n --> is encrypted? %b%n"
						+ " --> is person data protected? %b%n%n"
						+ "Persons%n-------%n%s%n%nWorks & Entries%n---------------%n%s%n",
						(defaultPw != null && !defaultPw.isEmpty()),
						(advancedPw != null && !advancedPw.isEmpty()),
						(persons != null ? persons.toString()
								: "no persons available"),
						(works != null ? works.toString()
								: "no works or entries available"));
	};
}
